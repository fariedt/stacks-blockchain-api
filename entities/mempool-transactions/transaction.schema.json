{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"MempoolTransaction","description":"Describes all transaction types on Stacks 2.0 blockchain","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTokenTransferTransaction","description":"Describes representation of a Type-0 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-0-transferring-an-asset","type":"object","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","description":"Abstract transaction. This schema makes up all properties common between all Stacks 2.0 transaction types","type":"object","required":["tx_id","tx_status","nonce","fee_rate","sender_address","sponsored","post_condition_mode","receipt_time","receipt_time_iso"],"properties":{"tx_id":{"type":"string"},"tx_status":{"type":"string","description":"Status of the transaction in the mempool. Can be pending in the mempool. Or dropped from the mempool from being replaced by a transaction with the same nonce but a higher fee, replaced by a transaction with the same nonce but in the canonical fork, the transaction is too expensive to include in a block, or because it became stale.","$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTransactionStatus","enum":["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},"tx_result":{"type":"object","required":["hex","repr"],"additionalProperties":false,"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"nonce":{"type":"integer","description":"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},"fee_rate":{"type":"string","description":"Integer string (64-bit unsigned integer)."},"sender_address":{"type":"string"},"sponsored":{"type":"boolean","description":"Denotes whether the originating account is the same as the paying account"},"sponsor_address":{"type":"string"},"post_condition_mode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionMode","description":"","type":"string","enum":["allow","deny"]},"receipt_time":{"type":"number","description":"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},"receipt_time_iso":{"type":"string","description":"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{"type":"object","required":["tx_type","token_transfer"],"properties":{"tx_type":{"type":"string","enum":["token_transfer"]},"token_transfer":{"type":"object","required":["recipient_address","amount","memo"],"additionalProperties":false,"properties":{"recipient_address":{"type":"string"},"amount":{"type":"string","description":"Integer string (64-bit unsigned integer)"},"memo":{"type":"string","description":"Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string)"}}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"MempoolSmartContractTransaction","description":"Describes representation of a Type-1 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-1-instantiating-a-smart-contract","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","description":"Abstract transaction. This schema makes up all properties common between all Stacks 2.0 transaction types","type":"object","required":["tx_id","tx_status","nonce","fee_rate","sender_address","sponsored","post_condition_mode","receipt_time","receipt_time_iso"],"properties":{"tx_id":{"type":"string"},"tx_status":{"type":"string","description":"Status of the transaction in the mempool. Can be pending in the mempool. Or dropped from the mempool from being replaced by a transaction with the same nonce but a higher fee, replaced by a transaction with the same nonce but in the canonical fork, the transaction is too expensive to include in a block, or because it became stale.","$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTransactionStatus","enum":["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},"tx_result":{"type":"object","required":["hex","repr"],"additionalProperties":false,"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"nonce":{"type":"integer","description":"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},"fee_rate":{"type":"string","description":"Integer string (64-bit unsigned integer)."},"sender_address":{"type":"string"},"sponsored":{"type":"boolean","description":"Denotes whether the originating account is the same as the paying account"},"sponsor_address":{"type":"string"},"post_condition_mode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionMode","description":"","type":"string","enum":["allow","deny"]},"receipt_time":{"type":"number","description":"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},"receipt_time_iso":{"type":"string","description":"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{"type":"object","required":["tx_type","smart_contract"],"properties":{"tx_type":{"type":"string","enum":["smart_contract"]},"smart_contract":{"type":"object","additionalProperties":false,"required":["contract_id","source_code"],"properties":{"contract_id":{"type":"string"},"source_code":{"type":"string","description":"Clarity code of the smart contract being deployed"}}},"post_conditions":{"type":"array","items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostCondition","description":"Post-conditionscan limit the damage done to a user's assets","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionStx","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","amount","type"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungibleConditionCode","description":"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.","type":"string","enum":["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},"amount":{"type":"string"},"type":{"enum":["stx"],"type":"string"}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungible","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","amount","type","asset"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungibleConditionCode","description":"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.","type":"string","enum":["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},"type":{"enum":["fungible"],"type":"string"},"amount":{"type":"string"},"asset":{"type":"object","required":["asset_name","contract_address","contract_name"],"additionalProperties":false,"properties":{"asset_name":{"type":"string"},"contract_address":{"type":"string"},"contract_name":{"type":"string"}}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionNonFungible","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","type","asset_value","asset"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionNonFungibleConditionCode","description":"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.","type":"string","enum":["sent","not_sent"]},"type":{"enum":["non_fungible"],"type":"string"},"asset_value":{"type":"object","additionalProperties":false,"required":["hex","repr"],"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"asset":{"type":"object","required":["asset_name","contract_address","contract_name"],"additionalProperties":false,"properties":{"asset_name":{"type":"string"},"contract_address":{"type":"string"},"contract_name":{"type":"string"}}}}}]}]}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"MempoolContractCallTransaction","description":"Describes representation of a Type 2 Stacks 2.0 transaction: Contract Call","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","description":"Abstract transaction. This schema makes up all properties common between all Stacks 2.0 transaction types","type":"object","required":["tx_id","tx_status","nonce","fee_rate","sender_address","sponsored","post_condition_mode","receipt_time","receipt_time_iso"],"properties":{"tx_id":{"type":"string"},"tx_status":{"type":"string","description":"Status of the transaction in the mempool. Can be pending in the mempool. Or dropped from the mempool from being replaced by a transaction with the same nonce but a higher fee, replaced by a transaction with the same nonce but in the canonical fork, the transaction is too expensive to include in a block, or because it became stale.","$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTransactionStatus","enum":["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},"tx_result":{"type":"object","required":["hex","repr"],"additionalProperties":false,"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"nonce":{"type":"integer","description":"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},"fee_rate":{"type":"string","description":"Integer string (64-bit unsigned integer)."},"sender_address":{"type":"string"},"sponsored":{"type":"boolean","description":"Denotes whether the originating account is the same as the paying account"},"sponsor_address":{"type":"string"},"post_condition_mode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionMode","description":"","type":"string","enum":["allow","deny"]},"receipt_time":{"type":"number","description":"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},"receipt_time_iso":{"type":"string","description":"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{"type":"object","required":["tx_type","contract_call","post_conditions"],"properties":{"tx_type":{"type":"string","enum":["contract_call"]},"contract_call":{"type":"object","additionalProperties":false,"required":["contract_id","function_name"],"properties":{"contract_id":{"type":"string"},"function_name":{"type":"string","description":"Name of the Clarity function to be invoked"}}},"post_conditions":{"type":"array","items":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostCondition","description":"Post-conditionscan limit the damage done to a user's assets","anyOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionStx","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","amount","type"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungibleConditionCode","description":"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.","type":"string","enum":["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},"amount":{"type":"string"},"type":{"enum":["stx"],"type":"string"}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungible","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","amount","type","asset"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionFungibleConditionCode","description":"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.","type":"string","enum":["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},"type":{"enum":["fungible"],"type":"string"},"amount":{"type":"string"},"asset":{"type":"object","required":["asset_name","contract_address","contract_name"],"additionalProperties":false,"properties":{"asset_name":{"type":"string"},"contract_address":{"type":"string"},"contract_name":{"type":"string"}}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionNonFungible","type":"object","allOf":[{"type":"object","required":["principal"],"properties":{"principal":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionPrincipal","type":"object","anyOf":[{"type":"object","additionalProperties":false,"description":"Principal Origin","required":["type_id"],"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_origin"]}}},{"type":"object","description":"Principal Standard","required":["type_id","address"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_standard"]},"address":{"type":"string"}}},{"type":"object","description":"Principal Contract","required":["type_id","address","contract_name"],"additionalProperties":false,"properties":{"type_id":{"type":"string","description":"String literal of type `PostConditionPrincipalType`","enum":["principal_contract"]},"address":{"type":"string"},"contract_name":{"type":"string"}}}]}}},{"type":"object","required":["condition_code","type","asset_value","asset"],"properties":{"condition_code":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionNonFungibleConditionCode","description":"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.","type":"string","enum":["sent","not_sent"]},"type":{"enum":["non_fungible"],"type":"string"},"asset_value":{"type":"object","additionalProperties":false,"required":["hex","repr"],"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"asset":{"type":"object","required":["asset_name","contract_address","contract_name"],"additionalProperties":false,"properties":{"asset_name":{"type":"string"},"contract_address":{"type":"string"},"contract_name":{"type":"string"}}}}}]}]}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"MempoolPoisonMicroblockTransaction","description":"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","description":"Abstract transaction. This schema makes up all properties common between all Stacks 2.0 transaction types","type":"object","required":["tx_id","tx_status","nonce","fee_rate","sender_address","sponsored","post_condition_mode","receipt_time","receipt_time_iso"],"properties":{"tx_id":{"type":"string"},"tx_status":{"type":"string","description":"Status of the transaction in the mempool. Can be pending in the mempool. Or dropped from the mempool from being replaced by a transaction with the same nonce but a higher fee, replaced by a transaction with the same nonce but in the canonical fork, the transaction is too expensive to include in a block, or because it became stale.","$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTransactionStatus","enum":["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},"tx_result":{"type":"object","required":["hex","repr"],"additionalProperties":false,"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"nonce":{"type":"integer","description":"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},"fee_rate":{"type":"string","description":"Integer string (64-bit unsigned integer)."},"sender_address":{"type":"string"},"sponsored":{"type":"boolean","description":"Denotes whether the originating account is the same as the paying account"},"sponsor_address":{"type":"string"},"post_condition_mode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionMode","description":"","type":"string","enum":["allow","deny"]},"receipt_time":{"type":"number","description":"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},"receipt_time_iso":{"type":"string","description":"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{"type":"object","required":["tx_type","poison_microblock"],"additionalProperties":false,"properties":{"tx_type":{"type":"string","enum":["poison_microblock"]},"poison_microblock":{"type":"object","required":["microblock_header_1","microblock_header_2"],"additionalProperties":false,"properties":{"microblock_header_1":{"type":"string","description":"Hex encoded microblock header"},"microblock_header_2":{"type":"string","description":"Hex encoded microblock header"}}}}}]},{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","title":"MempoolCoinbaseTransaction","description":"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock","allOf":[{"$schema":"http://json-schema.org/draft-07/schema#","description":"Abstract transaction. This schema makes up all properties common between all Stacks 2.0 transaction types","type":"object","required":["tx_id","tx_status","nonce","fee_rate","sender_address","sponsored","post_condition_mode","receipt_time","receipt_time_iso"],"properties":{"tx_id":{"type":"string"},"tx_status":{"type":"string","description":"Status of the transaction in the mempool. Can be pending in the mempool. Or dropped from the mempool from being replaced by a transaction with the same nonce but a higher fee, replaced by a transaction with the same nonce but in the canonical fork, the transaction is too expensive to include in a block, or because it became stale.","$schema":"http://json-schema.org/draft-07/schema#","title":"MempoolTransactionStatus","enum":["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},"tx_result":{"type":"object","required":["hex","repr"],"additionalProperties":false,"properties":{"hex":{"type":"string"},"repr":{"type":"string"}}},"nonce":{"type":"integer","description":"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},"fee_rate":{"type":"string","description":"Integer string (64-bit unsigned integer)."},"sender_address":{"type":"string"},"sponsored":{"type":"boolean","description":"Denotes whether the originating account is the same as the paying account"},"sponsor_address":{"type":"string"},"post_condition_mode":{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostConditionMode","description":"","type":"string","enum":["allow","deny"]},"receipt_time":{"type":"number","description":"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},"receipt_time_iso":{"type":"string","description":"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{"type":"object","required":["tx_type","coinbase_payload"],"properties":{"tx_type":{"type":"string","enum":["coinbase"]},"coinbase_payload":{"type":"object","additionalProperties":false,"required":["data"],"properties":{"data":{"type":"string","description":"Hex encoded 32-byte scratch space for block leader's use"}}}}}]}]}